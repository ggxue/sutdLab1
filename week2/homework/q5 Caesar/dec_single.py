import nltk

cipher = "0x737b763e327f8b3276777384328973868581803e32867a7386327f818586328178328b81878432758180757e87857b81808532897784771f1c7784848180778187854032897a7780327b3285737b7632867a7386328b81873285867b7f877e73867776327f77327b327f777380863e3286813274771f1c788473807d3e32867a7386327b80328081867b8079328b8187843278737e7e73757b7785327b328973853281757573857b8180737e7e8b3279877b7677761f1c8681897384768532867a7732868487867a403280818632867a7386328b818732738477327780867b84777e8b328984818079327b8032867a7b851f1c7b808586738075774032867a77327f7380327b853275778486737b807e8b3273327581878086848b3282847375867b867b818077844032738076327a771f1c89737e7d8532733279818176327677737e40341f1c1f1c34867a7780327b3289738532847b797a8640341f1c1f1c34868132867a738632778a8677808640341f1c1f1c3474878632867a73863289738532737e7e40341f1c1f1c3480813e3280813e327f8b3276777384328973868581803e3280818632737e7e3f3f748b328081327f7773808532737e7e40327b328981877e761f1c858779797785863e3278818432778a737f827e773e32867a73863273328284778577808673867b8180328681327332768175868184327b85327f8184771f1c7e7b7d777e8b3286813275817f77327884817f3273327a8185827b86737e32867a7380327884817f3273327a8780863e3273807632867a738632897a77801f1c867a77327b807b867b737e85323975407540393273847732827e737577763274777881847732867a7386327a8185827b86737e32867a773289818476851f1c39757a73847b807932758481858539328877848b328073868784737e7e8b328587797977858632867a777f85777e88778540341f1c1f1c348b8187327f738b32747732847b797a8640341f1c1f1c34867a77328284817473747b7e7b868b327e7b7785327b8032867a738632767b847775867b81804032738076327b783289773286737d7732867a7b8532738532731f1c8981847d7b8079327a8b8281867a77857b85328977327a738877327332788477857a327473857b85327884817f32897a7b757a328681328586738486328187841f1c7581808586848775867b818032817832867a7b853287807d8081898032887b857b86818440341f1c1f1c3489777e7e3e32867a77803e328587828281857b807932867a73863239754075407a40393276817785328586738076327881843239757a73847b80791f1c7584818585327a8185827b86737e3e3932897a738632788784867a7784327b8078778477807577"


# step 1: break cipher into array of ciphered hex
def break_string_into_substrings(string):
    substrings = [string[i:i+2] for i in range(2, len(string), 2)]
    return substrings

c_hex_arr = break_string_into_substrings(cipher)
print(c_hex_arr)

# -----------------

p_text_string = ""

# step 2: convert each ciphered hex into ciphered decimal
decimal_array = list(map(lambda x: int(x, 16), c_hex_arr))
print(decimal_array)

def is_valid_english_sentence(sentence):
    # Tokenize the sentence into words
    words = nltk.word_tokenize(sentence)

    # Check if all words are valid English words
    for word in words:
        if not nltk.corpus.words.words().__contains__(word.lower()):
            return False

    return True

def log_p_text_string(index, string):
    with open('output.txt', 'a', encoding='utf-8') as f:
        log_entry = f"Index: {index}, String: {string}\n"
        f.write(log_entry)

ascii_length = 255
for i in range(1, ascii_length):
    print(i)
    for num in decimal_array:
        p_text_string += chr((num-i) % ascii_length)
        print("check:")
        print(p_text_string)
    log_p_text_string(i, p_text_string)
    if is_valid_english_sentence(p_text_string):
        print("valid")
        print(p_text_string)
        break
    else:
        print("invalid")
        p_text_string = ""
